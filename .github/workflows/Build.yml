# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

name: CI/CD

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      configuration:
        required: true
        type: string
      enable_sanitizers:
        required: false
        type: boolean
      enable_coverage:
        required: false
        type: boolean
      publish_docker:
        required: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: alan-jowett/bpf_conformance

permissions:
  contents: read
  packages: write

jobs:
  build:

    runs-on: ${{inputs.platform}}
    env:
      BUILD_TYPE: ${{inputs.configuration}}

    steps:
    - uses: actions/checkout@v3

    - name: Install prerequisites - Ubuntu-20.04
      if: inputs.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get install -y libboost-dev \
         libboost-filesystem-dev \
         libboost-program-options-dev \
         libbpf-dev \
         lcov

    - name: Install prerequisites - macos-11
      if: inputs.platform == 'macos-11'
      run: |
        brew install \
          cmake \
          ninja \
          ccache \
          boost

    - name: Cache nuget packages
      if: inputs.platform == 'windows-2019'
      uses: actions/cache@56461b9eb0f8438fd15c7a9968e3c9ebb18ceff1
      env:
        cache-name: cache-nuget-modules
      with:
        path: build\packages
        key: ${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Configure CMake
      if: inputs.platform == 'windows-2019'
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Configure CMake
      if: inputs.platform == 'ubuntu-20.04' || inputs.platform == 'macos-11'
      run: |
        if [ "${{inputs.enable_sanitizers}}" = "true" ]; then
          export SANITIZER_FLAGS="-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        fi
        if [ "${{inputs.enable_coverage}}" = "true" ]; then
          export COVERAGE_FLAGS="-DCMAKE_CXX_FLAGS=\"--coverage\" -DCMAKE_C_FLAGS=\"--coverage\""
        fi
        cmake \
          -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_FLAGS="${SANITIZER_FLAGS}" \
          -DCMAKE_C_FLAGS="${SANITIZER_FLAGS}" \
          ${COVERAGE_FLAGS}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test - BPF ISA v1
      if: inputs.platform == 'ubuntu-20.04'
      working-directory: ${{github.workspace}}
      run: |
        sudo build/src/bpf_conformance_runner --test_file_directory tests --plugin_path build/libbpf_plugin/libbpf_plugin --list_opcodes true --cpu_version v1 --debug true > result.txt
        cat result.txt
        grep -q "FAIL" result.txt

    - name: Test - BPF ISA v2
      if: inputs.platform == 'ubuntu-20.04'
      working-directory: ${{github.workspace}}
      run: |
        sudo build/src/bpf_conformance_runner --test_file_directory tests --plugin_path build/libbpf_plugin/libbpf_plugin --list_opcodes true  --cpu_version v2 --debug true > result.txt
        cat result.txt
        grep -q "FAIL" result.txt

    - name: Test - BPF ISA v3
      if: inputs.platform == 'ubuntu-20.04'
      working-directory: ${{github.workspace}}
      run: |
        sudo build/src/bpf_conformance_runner --test_file_directory tests --plugin_path build/libbpf_plugin/libbpf_plugin --list_opcodes true --cpu_version v3 --debug true  > result.txt
        cat result.txt
        grep -q "FAIL" result.txt

    - name: Test - Help
      if: inputs.platform == 'ubuntu-20.04'
      working-directory: ${{github.workspace}}
      run: |
        sudo build/src/bpf_conformance_runner --help > result.txt || cat result.txt
        if [ $(cat result.txt | wc -l) -lt 10 ]; then
          exit 1
        fi

    - name: Test - No test_file_path
      if: inputs.platform == 'ubuntu-20.04'
      working-directory: ${{github.workspace}}
      run: |
        build/src/bpf_conformance_runner > result.txt || cat result.txt
        greq -q "test_file_path or test_file_directory is required" result.txt

    - name: Test - No plugin_path
      if: inputs.platform == 'ubuntu-20.04'
      working-directory: ${{github.workspace}}
      run: |
        build/src/bpf_conformance_runner --test_file_path tests > result.txt || cat result.txt
        greq -q "plugin_path is required" result.txt

    - name: Test - Invalid CPU version
      if: inputs.platform == 'ubuntu-20.04'
      working-directory: ${{github.workspace}}
      run: |
        sudo build/src/bpf_conformance_runner --test_file_directory tests --plugin_path build/libbpf_plugin/libbpf_plugin --list_opcodes true --cpu_version v4 > result.txt | cat result.txt
        grep -q "Invalid CPU version" result.txt

    - name: Generate code coverage report
      if: inputs.enable_coverage == true
      run: |
        mkdir -p coverage
        lcov --capture --directory build --include '${{github.workspace}}/*' --output-file coverage/lcov.info

    - name: Coveralls Parallel
      if: inputs.enable_coverage == true
      uses: coverallsapp/github-action@1.1.3
      with:
        github-token: ${{ secrets.github_token }}
        flag-name: run-${{inputs.build_type}}-${{inputs.platform}}-${{inputs.arch}}
        parallel: true

    - name: Log in to the Container registry
      if: inputs.publish_docker == true
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      if: inputs.publish_docker == true
      id: meta
      uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      if: inputs.publish_docker == true && github.event_name == 'push'
      uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94
      with:
        context: build
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

