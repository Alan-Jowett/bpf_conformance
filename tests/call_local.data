# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT
-- asm
# %r1-r5 are passed to the callee
mov %r0, 0
mov %r1, 1
mov %r2, 2
mov %r3, 3
mov %r4, 4
mov %r5, 5
# %r6-r9 are preserved
mov %r6, 6
mov %r7, 7
mov %r8, 8
mov %r9, 9
# Write to the stack to make sure it's preserved.
stdw [%r10-8], 0x44332211
stdw [%r10-16], 0x88776655
call local func1
# %r0 contains the return value
# %r0 should contain 1 + 2 + 3 + 4 + 5
# Write to the stack to make sure it's preserved.
jne %r0, 15, failed
# %r6 through %r9 should be preserved
jne %r6, 6, failed
jne %r7, 7, failed
jne %r8, 8, failed
jne %r9, 9, failed
# Read back values from stack.
# Check that the values were not overwritten by func1.
ldxw %r6, [%r10-8]
mov32 %r0, 0x44332211
jne %r6, %r0, failed
ldxw %r7, [%r10-16]
mov32 %r0, 0x88776655
jne %r7, %r0, failed
# Success
mov %r0, 1
exit
failed:
mov %r0, -1
exit
# Function sets %r0 = %r1 + %r2 + %r3 + %r4 + %r5
func1:
mov %r0, 0
add %r0, %r1
add %r0, %r2
add %r0, %r3
add %r0, %r4
add %r0, %r5
# Write to the stack, shouldn't overwrite the callee's values.
stdw [%r10-8], 0xCCBBAA99
stdw [%r10-16], 0x00FFEEDD
mov %r6, 0
mov %r7, 0
mov %r8, 0
mov %r9, 0
exit
-- result
0x1
